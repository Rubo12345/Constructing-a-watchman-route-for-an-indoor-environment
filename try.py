import matplotlib.pyplot as plt
from scipy.spatial import  Voronoi, voronoi_plot_2d
import numpy as np
import math
import pyclipper
from sympy import Max
import tripy
from shapely.geometry import Point,Polygon #used to chk pt in or out of poly
import time

P = [(24970,19250),(23600,19250),(20740,22110),(22790,24160),(19395,27554),\
     (17345,25504),(15560,27289),(15560,30215),(11165,30215),(11165,27915),\
     (12435,27915),(15220,24415),(12445,21630),(16865,17210),(19650,19995),\
     (23600,16045),(24970,16045)]
P = [(4,4),(8,4),(8,0),(14,-5),(20,0),(20,6),(15,6),(15,10),\
    (20,10),(20,14),(16,14),(16,16),(10,16),(10,14),(6,14),(6,16),(2,16),\
    (2,14),(0,14),(-5,7),(0,0),(2,-2),(4,0)]
# a = [];b = []
# for i in range(0,25):
#     a = []
#     for j in range(0,24):
#         if Polygon(P).contains(Point(j,i)):
#             a.append(0)
#         else:
#             a.append(1)
#     b.append(a)
# # print(b)

import matplotlib.pyplot as plt
x=[[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
y=[[1,2,3,4],[1,6,3,4],[1,2,9,4],[1,2,0,4]]
for i in range(len(x)):
    plt.figure(1)
    plt.plot(x[i],y[i])
    # Show/save figure as desired.
    # plt.show()
# Can show all four figures at once by calling plt.show() here, outside the loop.
plt.show()


'''grid = [[1,1,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
        [1,1,1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
        [1,1,1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
        [1,1,1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
        [1,1,1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
        [1,1,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
        [1,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
        [1,1,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
        [1,1,1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1,1,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]'''


# Python3 code to demonstrate working of
# Duplicate element indices in list
# Using list comprehension + list slicing
  
# initializing list
test_list = [1, 4, 5, 5, 5, 9, 1]
  
# # printing original list
# print("The original list is : " + str(test_list))
  
# # Duplicate element indices in list
# # Using list comprehension + list slicing
# res = [idx for idx, val in enumerate(test_list) if val in test_list[:idx]]
# print(res)       
# # printing result
# print("The list of duplicate elements is :  " + str(res))

'''
[[[(17345.0, 25503.985857864387), (24970, 16045)], [(17345.0, 25503.985857864387), (23600, 16045)]], 
[[(17345.0, 25503.985857864387), (23600, 16045)], [(17345.0, 25503.985857864387), (19650, 19995)]],
 [[(17345.0, 25503.985857864387), (19650, 19995)], [(17345.0, 25503.985857864387), (16865, 17210)]],
  [[(17345.0, 25503.985857864387), (16865, 17210)], [(17345.0, 25503.985857864387), (12445, 21630)]],
   [[(17345.0, 25503.985857864387), (12445, 21630)], [(17345.0, 25503.985857864387), (15220, 24415)]],
    [[(17345.0, 25503.985857864387), (15220, 24415)], [(17345.0, 25503.985857864387), (12435, 27915)]],
     [[(17345.0, 25503.985857864387), (15560, 27289)], [(17345.0, 25503.985857864387), (17345, 25504)]],
      [[(17345.0, 25503.985857864387), (17345, 25504)], [(17345.0, 25503.985857864387), (19395, 27554)]],
       [[(17345.0, 25503.985857864387), (19395, 27554)], [(17345.0, 25503.985857864387), (22790, 24160)]],
        [[(17345.0, 25503.985857864387), (22790, 24160)], [(17345.0, 25503.985857864387), (20740, 22110)]], 
        [[(17345.0, 25503.985857864387), (20740, 22110)], [(17345.0, 25503.985857864387), (23600, 19250)]],
         [[(12435.004822376794, 27915.00999999999), (12435, 27915)], [(12435.004822376794, 27915.00999999999), (11165, 27915)]],
         [[(12435.004822376794, 27915.00999999999), (11165, 27915)], [(12435.004822376794, 27915.00999999999), (11165, 30215)]], 
         [[(12435.004822376794, 27915.00999999999), (11165, 30215)], [(12435.004822376794, 27915.00999999999), (15560, 30215)]], 
         [[(12435.004822376794, 27915.00999999999), (15560, 30215)], [(12435.004822376794, 27915.00999999999), (15560, 27289)]], 
         [[(24969.990000000013, 16045.00999999999), (23600, 19250)], [(24969.990000000013, 16045.00999999999), (24970, 19250)]], 
[[(24969.990000000013, 16045.00999999999), (24970, 19250)], [(24969.990000000013, 16045.00999999999), (24970, 16045)]]]
'''
# import numpy as np
# start = (0,0)
# stop = (10,10)
# a = np.linspace(start, stop, num=4)
# print(a)
# print(len(a))

# from matplotlib.collections import PatchCollection
# from matplotlib.patches import Polygon
# from matplotlib import pyplot as plt
# vertices = [(0,0),(4,0),(4,4),(0,4)]
# Polygon(vertices, color=[1, 0, 0])
# p = PatchCollection(patches)
# p.set_color([1, 0, 0])

# print([1,2,3,4] * 5)